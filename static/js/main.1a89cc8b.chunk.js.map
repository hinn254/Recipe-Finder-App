{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","image","calories","title","ingredients","className","map","ingredient","i","key","text","Math","trunc","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","urlExample","useEffect","a","fetch","response","json","Recdata","hits","fetchData","getSearch","e","preventDefault","length","value","onChange","target","type","onClick","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAmBeA,G,MAhBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,yBAAKC,UAAU,UACb,4BAAKF,GACL,4BACE,2CACCC,EAAYE,KAAI,SAACC,EAAYC,GAAb,OACf,wBAAIC,IAAKD,GAAID,EAAWG,UAG5B,wCAAcC,KAAKC,MAAMV,IACzB,yBAAKG,UAAU,QAAQQ,IAAKZ,EAAOa,IAAKX,O,MC+D/BY,MAzEf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGaJ,mBAAS,UAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAOPC,EAAU,0CAAsCF,EAAtC,mBAFD,WAEC,oBADA,oCAGhBG,qBAAU,YACO,uCAAG,8BAAAC,EAAA,sEACOC,MAAMH,GADb,cACVI,EADU,gBAEMA,EAASC,OAFf,OAEVC,EAFU,OAGhBX,EAAWW,EAAQC,MAHH,2CAAH,qDAKfC,KACC,CAACV,EAAOE,IAEX,IAAMS,EAAY,SAACC,GACjBA,EAAEC,iBACFZ,EAASH,GACTC,EAAU,KAGZ,OAAuB,IAAnBH,EAAQkB,OAER,yBAAK9B,UAAU,OACb,0BAAMA,UAAU,eACd,2BACE+B,MAAOjB,EACPkB,SAAU,SAACJ,GAAD,OAAOb,EAAUa,EAAEK,OAAOF,QACpC/B,UAAU,aACVkC,KAAK,SAEP,4BAAQC,QAASR,EAAW3B,UAAU,gBAAgBkC,KAAK,UAA3D,WAIF,yBAAKlC,UAAU,WACb,kEAON,yBAAKA,UAAU,OACb,0BAAMA,UAAU,eACd,2BACE+B,MAAOjB,EACPkB,SAAU,SAACJ,GAAD,OAAOb,EAAUa,EAAEK,OAAOF,QACpC/B,UAAU,aACVkC,KAAK,SAEP,4BAAQC,QAASR,EAAW3B,UAAU,gBAAgBkC,KAAK,UAA3D,WAIF,yBAAKlC,UAAU,WACZY,EAAQX,KAAI,SAACmC,EAAQjC,GAAT,OACX,kBAAC,EAAD,CACEC,IAAKD,EACLP,MAAOwC,EAAOA,OAAOxC,MACrBE,MAAOsC,EAAOA,OAAOC,MACrBxC,SAAUuC,EAAOA,OAAOvC,SACxBE,YAAaqC,EAAOA,OAAOrC,oBCzDnBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1a89cc8b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./recipe.css\";\n\nconst Recipe = ({ image, calories, title, ingredients }) => {\n  return (\n    <div className=\"recipe\">\n      <h1>{title}</h1>\n      <ol>\n        <h3>Ingredients</h3>\n        {ingredients.map((ingredient, i) => (\n          <li key={i}>{ingredient.text}</li>\n        ))}\n      </ol>\n      <p>Calories: {Math.trunc(calories)}</p>\n      <img className=\"image\" src={image} alt={title} />\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nfunction App() {\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"banana\");\n\n  const APP_ID = \"ddecd6fe\";\n  const APP_KEY = \"bf7938b79473e3bcd10864b69dc533df\";\n  const urlExample = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(urlExample);\n      const Recdata = await response.json();\n      setRecipes(Recdata.hits);\n    };\n    fetchData();\n  }, [query, urlExample]);\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  if (recipes.length === 0) {\n    return (\n      <div className=\"App\">\n        <form className=\"search-form\">\n          <input\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n            className=\"search-bar\"\n            type=\"text\"\n          />\n          <button onClick={getSearch} className=\"search-button\" type=\"submit\">\n            search\n          </button>\n        </form>\n        <div className=\"recipes\">\n          <h1>Please double check your search.</h1>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <form className=\"search-form\">\n        <input\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          className=\"search-bar\"\n          type=\"text\"\n        />\n        <button onClick={getSearch} className=\"search-button\" type=\"submit\">\n          search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map((recipe, i) => (\n          <Recipe\n            key={i}\n            image={recipe.recipe.image}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}